// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.EF.Migrations
{
    [DbContext(typeof(MASV2Context))]
    [Migration("20181209150028_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview.18572.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCoreFluentAPI.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("City");
                });

            modelBuilder.Entity("EFCoreFluentAPI.Grade", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("ProfessorId");

                    b.Property<int>("SubjectId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("StudentsGrade");

                    b.HasKey("StudentId", "ProfessorId", "SubjectId");

                    b.HasIndex("ProfessorId", "SubjectId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("EFCoreFluentAPI.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("EFCoreFluentAPI.ProfessorSubject", b =>
                {
                    b.Property<int>("ProfessorId");

                    b.Property<int>("SubjectId");

                    b.HasKey("ProfessorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ProfessorSubject");
                });

            modelBuilder.Entity("EFCoreFluentAPI.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("EFCoreFluentAPI.Professor", b =>
                {
                    b.HasBaseType("EFCoreFluentAPI.Person");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CONVERT(date, GETDATE())");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("EFCoreFluentAPI.Student", b =>
                {
                    b.HasBaseType("EFCoreFluentAPI.Person");

                    b.Property<int>("EnrollmentNum");

                    b.Property<int>("EnrollmentYear");

                    b.ToTable("TStudent");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("EFCoreFluentAPI.Grade", b =>
                {
                    b.HasOne("EFCoreFluentAPI.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EFCoreFluentAPI.ProfessorSubject", "ProfessorSubject")
                        .WithMany()
                        .HasForeignKey("ProfessorId", "SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EFCoreFluentAPI.Person", b =>
                {
                    b.HasOne("EFCoreFluentAPI.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("EFCoreFluentAPI.ProfessorSubject", b =>
                {
                    b.HasOne("EFCoreFluentAPI.Professor", "Professor")
                        .WithMany("Subjects")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EFCoreFluentAPI.Subject", "Subject")
                        .WithMany("Professors")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreFluentAPI.Professor", b =>
                {
                    b.OwnsMany("EFCoreFluentAPI.ScientificArticle", "Articles", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("ProfessorId");

                            b1.HasKey("Id");

                            b1.HasIndex("ProfessorId");

                            b1.ToTable("ScientificArticle");

                            b1.HasOne("EFCoreFluentAPI.Professor")
                                .WithMany("Articles")
                                .HasForeignKey("ProfessorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("EFCoreFluentAPI.Student", b =>
                {
                    b.OwnsOne("EFCoreFluentAPI.StudentDetails", "StudentDetails", b1 =>
                        {
                            b1.Property<int>("StudentId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address");

                            b1.Property<string>("HighSchool");

                            b1.HasKey("StudentId");

                            b1.ToTable("Person");

                            b1.HasOne("EFCoreFluentAPI.Student")
                                .WithOne("StudentDetails")
                                .HasForeignKey("EFCoreFluentAPI.StudentDetails", "StudentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
